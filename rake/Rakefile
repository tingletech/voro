## Rakefile to run the voro flow
# Brian Tingle 2008/March, April / 2010 summer,fall
# This Rakefile runs the weekly voro processing and XTF indexing
# 

#
# 00 18 * * 5 /voro/code/wrappers/bin/cronic /voro/local/bin/rake -f /voro/code/rake/Rakefile
# http://habilis.net/cronic/ was modified to log in /voro/var/log/
# add some locking?

# default task -- do it all from cron
# why not use dependencies?  
# I want to be able to re-run the sub-parts independently in the case of a botched build

branch = 'production'
ENV['PERL5LIB'] = "#{ENV['PREFIX']}/perllib"
ENV['CODEBASE'] = "#{ENV['HOME']}/branches/#{branch}"


task :default do |t|
	Rake::Task["sync:pullfromproduction"].execute
	Rake::Task["ead:makemets"].invoke
	Rake::Task[:DCme].invoke
	Rake::Task["ead:pdfsweep"].invoke
	Rake::Task["ead:oisindex"].invoke
	Rake::Task["xtf:metsark"].invoke
 	Rake::Task["ead:pdfgen"].invoke
 	Rake::Task["ingest-stats"].invoke
 	Rake::Task["report-results"].invoke
end

# re-use the TWS wrappers and dependencies
# (TWS wrappers log things in /voro/var/log)
namespace :ead do
	desc "build EAD files"
	
	desc "make METS from the EAD"
	task :makemets do |t|
                ENV['VOROBASE'] = "#{ENV['HOME']}/branches/#{branch}/voro"
                sh "perl #{ENV['CODEBASE']}/voro/batch-bin/reMets.pl"
                # sh "perl #{ENV['CODEBASE']}/voro/batch-bin/removeMets.pl"
		# Regenerate all METS [VORO update #6]
		# perl ${VOROBASE}/batch-bin/reMets.pl
		# reads workspace/dlxs/prime2002 
		# and outputs METS to /voro/data/oac-ead/data 
		# Regenerate METS for removed items (200502)
		# perl ${VOROBASE}/batch-bin/removeMets.pl
		# reads workspace/dlxs/remove and 
		# outputs METS to /voro/data/oac-ead/data
		# WRONG: METS are going to workspace/dlxs/oac-ead/mets
		# FIXED; need to see if this fixes removal issue
	end

	desc "sweep pdf files to dynaXML directory structure"
	task :pdfsweep do |t|
		# this should be "temporary", I didn't have time
		# to clean this up, I'd like for PDF to have
		# the same filename as the EAD
		sh "#{ENV['HOME']}/branches/#{branch}/voro/batch-bin/pdfDlxs2dyxaXML.pl"
	end

	desc "build sqlite3 database for ois wsgi service"
	task :oisindex do |t|
		# scans files in /voro/XTF/data and uses the django database to build
		# an sqlite database /voro/code/oac4/ois/ois.sqlite3
		# used later in prefilter via /wsgi/ois_service.wsgi?ark=&parent_ark=
		sh "#{ENV['HOME']}/branches/#{branch}/voro/objinfo/oisIndexer.py"
                # sh "#{ENV['PREFIX']}/bin/python 
		# /voro/code/oac4/ois/oisIndexer.py  >&! /voro/code/oac4/ois/oisIndexer.log
	end

	desc "Create new pdfs for submitted EADs"
	task :pdfgen do |t|
		sh "#{ENV['HOME']}/branches/#{branch}/oac-ead-to-pdf/scripts/run_by_size_with_excludelist-pp.sh"
	end

end

# This replaces rsync.sh and RSYNCDATA
namespace :sync do
	# temporary / phase 1 deploy where voroEAD still runs on voro
        desc "pull files from production TEMPORARY"
	task :pullfromproduction do |t|
		production = "voro@voro.cdlib.org"
		cvs_opts = "-v --cvs-exclude --links --recursive --times"
		sh "rsync #{cvs_opts} #{production}:/voro/data/oac-ead/prime2002/ #{ENV['HOME']}/data/in/oac-ead/prime2002"
		sh "rsync #{cvs_opts} #{production}:/voro/data/oac-ead/submission/ #{ENV['HOME']}/data/in/oac-ead/submission"
		sh "rsync #{cvs_opts} #{production}:/voro/data/oac-ead/remove/ #{ENV['HOME']}/data/in/oac-ead/remove"
		sh "rsync #{cvs_opts} #{production}:/voro/XTF/data-nonark/marc/ #{ENV['HOME']}/data/xtf/data/marc"
        end
end

# This replaces the DCme TWS shell wrapper
desc "Create Dublin Core records"
task :DCme do |t|
        # /dsc/branches/production/voro/batch-bin/DCme
	sh "#{ENV['HOME']}/branches/#{branch}/voro/batch-bin/DCme"
	# 1. create the build-dc.xml ant build file using a perl script
	#  /voro/mets-support, /voro/workspace/DC/build-dc.xml 
	#  and /voro/XTF/data  are  hardcoded in DCme perl code

	sh "/cdlcommon/products/bin/ant -f #{ENV['HOME']}/workspace/DC/build-dc.xml"
	# 2. run ant; needs ant >= 1.6.0
	# works on files in /voro/XTF/data; puts .dc.xml in the same tree
end

# these tasks do the XTF indexing and replace the shell wrappers
# that were in /xtf/bin/index* (but are for the /voro/XTF/ version of the index
namespace :xtf do
	# common XTF task variables
	xtf_home = "#{ENV['HOME']}/branches/#{branch}/xtf"
	textIndexer = "#{xtf_home}/bin/textIndexer"

	desc "Index METS, TEI, EAD with ARKs"
	task :metsark do |t|
		sh "#{textIndexer} -rotate -trace debug -index cdl"
	end

end

desc "run the ingest stats reports"
task "ingest-stats" do |t|
	sh "#{ENV['HOME']}/branches/#{branch}/voro/batch-bin/voro_ingest_stats.pl"
end

desc "report the time of the finished index to voro.posterous.com"
task "report-results" do
    require 'socket'
    hostname = Socket.gethostname
    from_addr = "dsc@#{hostname}.cdlib.org"
    to_addrs = ["mark.redar@ucop.edu", "voro@posterous.com"]
    to_addrs_flat = to_addrs.map{ |x| "#{x}, " }.compact
    start_time = File.ctime("#{ENV['HOME']}/log/nightly.lock")
    index_time = File.mtime(Dir.glob("#{ENV['HOME']}/branches/#{branch}/xtf/index/*.cfs")[0])
    if "#{ENV['PRODUCTION']}" == 'true'
        msg = <<EOM
From: <#{from_addr}>
To: <#{to_addrs_flat}>
Subject: New index complete

EADs submitted and processed with voroEAD before #{start_time.strftime("%m/%d/%Y at %I:%M%p")} should be online.

Index was completed at #{index_time.strftime("%m/%d/%Y at %I:%M%p")}.
EOM
        require 'net/smtp'
        Net::SMTP.start('localhost', 25) do |smtp|
            smtp.send_message msg, from_addr, to_addrs
        end
    end
end
